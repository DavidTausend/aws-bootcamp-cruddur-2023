AWSTemplateFormatVersion: 2010-09-09
Description: |
  The networking and cluster configuration to support fargate container
  - ECS Fargate Cluster
  - Application load balance
    - Only ipv4
    - internet facing
  -ALB security Group
  - HTTPS Listerner
    - Send naked domain to frontend target group
    - Send api. subdomain to backend target group
  - HTTP Listerner
    - redirects to HTTPS Listerner
  - Backend target group
  - Fronted target group


Paramenters:
  CerficationArn:
    Type: String
Resources:
  FargateCluster: 
    #https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub Cluster "${AWS::StackName}FargateCluster"
      CapacityProvider: 
        - FARGATE
      ClusterSettings:
        - Name:
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
         #KmskeyId: !Ref KmsKeyId
         Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: cruddur
ALB:
 #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
 Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
 Properties:
  Name: !Sub Cluster "${AWS::StackName}ALB"
  Type: application
  IpAddressType: ipv4
  scheme: internet-facing
  SecurityGroups:
    !Ref ALBSG
  Subnets:
  LoadBalancerAttributes:
    - Name: routing.http2.enabled
      Value: true
    - Name: routung.http.preserve_host_header.enabled
      Value: false
    - Name: deletion_protection.enabled
      Value: true
    - Name: load_balancing.cross_zone.enabled
      Value: true
    # incase we want to turn logs  
    #- Name: access_logs.s3.enabled
     # Value: false
    #- Name: access-logs.s3.bucket
     # Value: bucket-name
    #- Name: access_logs.s3.prefix
     # Value:
HTTPSListener:
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties: 
    Protocol: HTTPS
    Port: 443
    Loadbalancearn: !Ref ALB
    Certificates:
      - CertificateArn: !Ref CerificateArn
    Defaultactions:
      - Type: forward
        TargerGroupArn: !Ref FrontendTG
HTTPListener:
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties: 
    Protocol: HTTP
    Port: 80
    Loadbalancearn: !Ref ALB
  Defaultactions:
      - Type: redirect
        RedirectConfig:
          Protocol: "HTTPS"
          Port: 443
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: "HTTP_301"
  ApiALBListenerRule:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:  
      Conditions: 
      - Field: host-header
        HostHearderConfig:
          Values: 
            - .api.hallotausend.com
      Actions: 
      - Type: forward
        TargerGroupArn: !Ref BackendTG
      ListenerArn: !Ref HTTPSListener
      Priority: 1
  ALBSG: 
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}AlbSG"
      GroupDescription: Public Facing SG for our Cruddur ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTPS
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTP
BackendTG:
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
FrontendTG:
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html      
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
#Outputs: